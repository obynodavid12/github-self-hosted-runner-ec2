

name: Terraform-Apply-Self-Hosted-Runner-EC2


on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init
     
    - name: Terraform validate
      run: |
        terraform validate   

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'push'
      run: terraform plan -no-color
      continue-on-error: true
#       env:
#         PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1


      # On push to master, build or change infrastructure according to Terraform configuration files
    - name: Terraform validate
      run: |
        terraform validate
    - name: Terraform Apply
      run: |
        terraform apply -auto-approve -var 'personal_access_token=${{ secrets.PERSONAL_ACCESS_TOKEN }}'
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        # - name: Terraform destroy
        #if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        #id: destroy
        #run: terraform destroy -auto-approve
